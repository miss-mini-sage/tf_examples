pool:
  vmImage: ubuntu-latest

stages:
- stage: 'Terraform'
  displayName: 'Terraform'
  jobs:
  - job: 'Build tfvars file'
    steps:
    - script: |
        echo "build tfvars file ...."

  - job: 'Terraform_Plan'
    steps:
    - script: |
        echo "Running Terraform init..."
        terraform init \
            -backend-config="resource_group_name=${{ parameters.tfResourceGroup }}" \ 
            -backend-config="storage_account_name=${{ parameters.tfStorageAccount }}" \
            -backend-config="container_name=${{ parameters.tfContainer }}" \
            -backend-config="key=${{ parameters.tfBlob }}" 
        terraform validate
        echo "Running Terraform plan..."
        terraform plan -var-file ${{ parameters.tfvarsFile }}
      displayName: 'Terraform plan'
      workingDirectory: ${{ parameters.rootFolder }}
      env:
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET) # this needs to be explicitly set as it's a sensitive value
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)

  - deployment: 'Terraform_Apply'
    environment: ${{ parameters.adoEnvironment }} # using an ADO environment allows us to add a manual approval check
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - script: |
              echo "Running Terraform init..."
              terraform init \
                -backend-config="resource_group_name=${{ parameters.tfResourceGroup }}" \ 
                -backend-config="storage_account_name=${{ parameters.tfStorageAccount }}" \
                -backend-config="container_name=${{ parameters.tfContainer }}" \
                -backend-config="key=${{ parameters.tfBlob }}" 
              echo "Running Terraform apply..."
              terraform apply -var-file ${{ parameters.tfvarsFile }} -auto-approve
            displayName: 'Terraform apply'
            workingDirectory: ${{ parameters.rootFolder }}
            env:
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)